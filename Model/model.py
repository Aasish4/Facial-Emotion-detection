# -*- coding: utf-8 -*-
"""mini_xception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lDMrl639p6-m7WzJ_XpQ7OZ2Nuoo1wdb
"""

from keras.layers import Activation, Conv2D, SeparableConv2D
from keras.layers import GlobalAveragePooling2D, MaxPool2D, BatchNormalization
from keras.layers import Input
from keras.models import Model
from keras.regularizers import l2
from keras import layers

def mini_xception(input_shape, num_classes, l2_regularization=0.01):
  regularization = l2(l2_regularization)

  # base
  img_input = Input(input_shape)
  x = Conv2D(8, (3,3), strides=(1,1), kernel_regularizer=regularization, use_bias=False)(img_input)
  x = BatchNormalization()(x)
  x = Activation('relu')(x)

  x = Conv2D(8, (3,3), strides=(1,1), kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = Activation('relu')(x)

  # module 1 
  residual = Conv2D(16, (1,1), strides=(2,2), padding='same', use_bias=False)(x)
  residual = BatchNormalization()(residual)

  x = SeparableConv2D(16, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = Activation('relu')(x)

  x = SeparableConv2D(16, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = MaxPool2D((3,3), strides=(2,2), padding='same')(x)
  x = layers.add([x, residual])

  # module 1 repeat 3 times
  residual = Conv2D(32, (1,1), strides=(2,2), padding='same', use_bias=False)(x)
  residual = BatchNormalization()(residual)

  x = SeparableConv2D(32, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = Activation('relu')(x)

  x = SeparableConv2D(32, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = MaxPool2D((3,3), strides=(2,2), padding='same')(x)
  x = layers.add([x, residual])

  residual = Conv2D(64, (1,1), strides=(2,2), padding='same', use_bias=False)(x)
  residual = BatchNormalization()(residual)

  x = SeparableConv2D(64, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = Activation('relu')(x)

  x = SeparableConv2D(64, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = MaxPool2D((3,3), strides=(2,2), padding='same')(x)
  x = layers.add([x, residual])

  residual = Conv2D(128, (1,1), strides=(2,2), padding='same', use_bias=False)(x)
  residual = BatchNormalization()(residual)

  x = SeparableConv2D(128, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = Activation('relu')(x)

  x = SeparableConv2D(128, (3,3), padding='same', kernel_regularizer=regularization, use_bias=False)(x)
  x = BatchNormalization()(x)
  x = MaxPool2D((3,3), strides=(2,2), padding='same')(x)
  x = layers.add([x, residual])

  # module 5
  x = Conv2D(num_classes, (3,3), padding='same')(x)
  x = GlobalAveragePooling2D()(x)
  output = Activation('softmax', name='predictions')(x)

  model = Model(img_input, output)
  return model

